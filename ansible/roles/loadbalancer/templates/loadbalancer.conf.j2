# Load balancer upstream configuration
upstream backend {
    {% if lb_method == 'least_conn' %}
    least_conn;
    {% elif lb_method == 'ip_hash' %}
    ip_hash;
    {% endif %}
    
    {% for server in backend_servers %}
    server {{ server.server }}{% if server.weight is defined %} weight={{ server.weight }}{% endif %}{% if server.max_fails is defined %} max_fails={{ server.max_fails }}{% endif %}{% if server.fail_timeout is defined %} fail_timeout={{ server.fail_timeout }}{% endif %};
    {% endfor %}
    
    # Health check settings
    keepalive 32;
}

server {
    listen 80;
    server_name {{ ansible_hostname }} {{ ansible_default_ipv4.address }};

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Main location - proxy to backend
    location / {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
    }

    # Health check endpoint for load balancer
    location /lb-health {
        access_log off;
        return 200 "Load Balancer Healthy\n";
        add_header Content-Type text/plain;
    }

    # Nginx status endpoint
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 192.168.56.0/24;
        deny all;
    }

    # Backend health check
    location /backend-health {
        access_log off;
        proxy_pass http://backend/health;
        proxy_set_header Host $host;
    }

    # Error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}
