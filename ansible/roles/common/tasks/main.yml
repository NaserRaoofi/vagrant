---
# Common tasks for all servers (smart installation checks)
- name: Verify basic connectivity
  ansible.builtin.ping:

- name: Check system information
  ansible.builtin.debug:
    msg: "Connected to {{ inventory_hostname }} ({{ ansible_host }})"

# The apt module is inherently idempotent.
# It will only install packages if they are not already present or are not the specified version.
# No need for pre-checks with shell commands.
- name: Install basic utility packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: yes # Run apt-get update before installing packages.
  loop:
    - curl
    - wget
    - vim
  register: basic_packages_installation_result
  # This is acceptable here as some packages might not be available on all minimal systems,
  # or there might be temporary network issues for a specific package.
  # The core functionality of the role is not strictly dependent on every single one of these.
  ignore_errors: true

- name: Display basic package installation results
  ansible.builtin.debug:
    msg: "Basic package installation attempt finished. Check results above. Skipped if already installed. Errors ignored for missing packages."
    # var: basic_packages_installation_result # Optionally uncomment to see detailed results

- name: Ensure basic directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /opt/app
    - /var/log/app

- name: Create basic system info file
  ansible.builtin.copy:
    dest: /etc/system-role
    content: |
      # System role configured by Ansible
      hostname={{ inventory_hostname }}
      role={{ group_names | join(',') }}
      configured={{ ansible_date_time.iso8601 }}
      last_check={{ ansible_date_time.iso8601 }}
    mode: '0644'

- name: Set basic hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname.split('.')[0] }}"
  # Hostname changes can sometimes fail due to system specifics or permissions,
  # but it's not critical enough to halt the entire provisioning for this lab environment.
  ignore_errors: true

- name: Set timezone
  community.general.timezone:
    name: "{{ timezone }}"

- name: Configure DNS
  ansible.builtin.template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    backup: true
  notify: restart networking

- name: Create application group
  ansible.builtin.group:
    name: appgroup
    state: present

- name: Create application user
  ansible.builtin.user:
    name: appuser
    group: appgroup
    shell: /bin/bash
    create_home: true
    state: present

- name: Configure SSH security (disable password auth)
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
    backup: true
  notify: restart ssh

- name: Ensure firewall is disabled (lab environment)
  ansible.builtin.systemd:
    name: ufw
    state: stopped
    enabled: false
  # This is for a lab/dev environment. In production, firewall should be managed and enabled.
  # Ignoring errors here because ufw might not be installed on all base images,
  # and the goal is to ensure it's not blocking, not to manage its installation here.
  ignore_errors: true

- name: Create log directory
  ansible.builtin.file:
    path: /var/log/ansible
    state: directory
    mode: '0755'
