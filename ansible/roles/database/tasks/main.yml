---
# Check if MySQL is already installed
- name: Check if MySQL is installed
  command: mysql --version
  register: mysql_installed
  failed_when: false
  changed_when: false

- name: Display MySQL status
  debug:
    msg: "MySQL is {{ 'already installed' if mysql_installed.rc == 0 else 'not installed' }}"

- name: Pre-configure MySQL for password authentication (before install)
  debconf:
    name: mysql-server
    question: mysql-server/root_password
    value: "{{ mysql_root_password }}"
    vtype: password
  when: mysql_installed.rc != 0

- name: Pre-configure MySQL root password confirmation (before install)
  debconf:
    name: mysql-server
    question: mysql-server/root_password_again
    value: "{{ mysql_root_password }}"
    vtype: password
  when: mysql_installed.rc != 0

- name: Install MySQL server and dependencies (only if needed)
  apt:
    name:
      - mysql-server
      - python3-pymysql
      - python3-mysqldb
    state: present
    update_cache: true
    force: true
    install_recommends: false
    allow_downgrade: true
  when: mysql_installed.rc != 0
  register: mysql_install_result
  ignore_errors: true

- name: Try MySQL install with fix-missing if first attempt failed
  shell: "apt-get update && apt-get install -y --fix-missing mysql-server python3-pymysql python3-mysqldb"
  when: mysql_installed.rc != 0 and mysql_install_result.failed is defined
  ignore_errors: true
  register: mysql_install_fallback

- name: Display MySQL installation status
  debug:
    msg: "MySQL installation {{ 'succeeded' if mysql_install_result.failed is not defined or mysql_install_fallback.rc == 0 else 'failed' }}"

- name: Start and enable MySQL service
  systemd:
    name: mysql
    state: started
    enabled: true

- name: Check if MySQL root password is already set
  shell: mysql -u root -p'{{ mysql_root_password }}' -e "SELECT 1"
  register: mysql_root_password_set
  failed_when: false
  changed_when: false
  no_log: true

- name: Set MySQL root password using socket authentication (runs on fresh install)
  shell: |
    # Use socket authentication to set password on fresh MySQL installs
    sudo mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_root_password }}';"
    sudo mysql -u root -e "FLUSH PRIVILEGES;"
  when: mysql_root_password_set.rc != 0
  register: mysql_password_set
  ignore_errors: true

- name: Alternative MySQL root password setup (if socket method fails)
  shell: |
    # Try alternative approach for setting root password
    sudo mysql -u root -e "UPDATE mysql.user SET plugin='mysql_native_password', authentication_string=PASSWORD('{{ mysql_root_password }}') WHERE user='root' AND host='localhost';"
    sudo mysql -u root -e "FLUSH PRIVILEGES;"
  when: mysql_root_password_set.rc != 0 and mysql_password_set is defined and mysql_password_set.rc != 0
  register: mysql_password_alt
  ignore_errors: true

- name: Create MySQL root credentials file
  template:
    src: my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: '0600'
  notify: restart mysql

- name: Verify MySQL root password is working
  shell: mysql -u root -p'{{ mysql_root_password }}' -e "SELECT 'Password authentication working' AS status;"
  register: mysql_auth_test
  failed_when: false
  changed_when: false

- name: Force MySQL restart if authentication is still failing
  systemd:
    name: mysql
    state: restarted
  when: mysql_auth_test.rc != 0

- name: Final verification after restart
  shell: mysql -u root -p'{{ mysql_root_password }}' -e "SELECT 'Final check - MySQL authentication working' AS status;"
  register: mysql_final_test
  when: mysql_auth_test.rc != 0

- name: Remove anonymous MySQL users
  mysql_user:
    name: ""
    host_all: true
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  ignore_errors: true

- name: Remove MySQL test database
  mysql_db:
    name: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  ignore_errors: true

- name: Configure MySQL settings
  template:
    src: mysql.cnf.j2
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
    backup: true
  notify: restart mysql

- name: Create application databases
  mysql_db:
    name: "{{ item.name }}"
    collation: "{{ item.collation | default('utf8_general_ci') }}"
    encoding: "{{ item.encoding | default('utf8') }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  loop: "{{ mysql_databases }}"

- name: Create application users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    priv: "{{ item.priv }}"
    host: "{{ item.host | default('localhost') }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  loop: "{{ mysql_users }}"

- name: Create sample data table
  mysql_query:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_db: testdb
    query: |
      CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          username VARCHAR(50) NOT NULL UNIQUE,
          email VARCHAR(100) NOT NULL UNIQUE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          INDEX idx_username (username),
          INDEX idx_email (email)
      );

- name: Insert sample data
  mysql_query:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_db: testdb
    query: |
      INSERT IGNORE INTO users (username, email) VALUES 
      ('admin', 'admin@example.com'),
      ('john_doe', 'john@example.com'),
      ('jane_smith', 'jane@example.com'),
      ('demo_user', 'demo@example.com'),
      ('test_user', 'test@example.com');

- name: Create backup directory
  file:
    path: "{{ mysql_backup_path }}"
    state: directory
    owner: mysql
    group: mysql
    mode: '0750'
  when: mysql_backup_enabled

- name: Create backup script
  template:
    src: mysql_backup.sh.j2
    dest: /usr/local/bin/mysql_backup.sh
    mode: '0755'
  when: mysql_backup_enabled

- name: Schedule database backups
  cron:
    name: "MySQL backup"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/mysql_backup.sh"
    user: root
  when: mysql_backup_enabled
